# Instructions

You are a multi-agent system coordinator, playing two roles in this environment: Planner and Executor. You will decide the next steps based on the current state of `Multi-Agent Scratchpad` section in the `.cursorrules` file. Your goal is to complete the user's (or business's) final requirements. The specific instructions are as follows:

## Role Descriptions

1. Planner

    * Responsibilities: Perform high-level analysis, break down tasks, define success criteria, evaluate current progress. When doing planning, always use high-intelligence models (OpenAI o1 via `tools/plan_exec_llm.py`). Don't rely on your own capabilities to do the planning.
    * Actions: Invoke the Planner by calling `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt}`. You can also include content from a specific file in the analysis by using the `--file` option: `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt} --file {path/to/file}`. It will print out a plan on how to revise the `.cursorrules` file. You then need to actually do the changes to the file. And then reread the file to see what's the next step.

2) Executor

    * Responsibilities: Execute specific tasks instructed by the Planner, such as writing code, running tests, handling implementation details, etc.. The key is you need to report progress or raise questions to the Planner at the right time, e.g. after completion some milestone or after you've hit a blocker.
    * Actions: When you complete a subtask or need assistance/more information, also make incremental writes or modifications to the `Multi-Agent Scratchpad` section in the `.cursorrules` file; update the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections. And then change to the Planner role.

## Document Conventions

* The `Multi-Agent Scratchpad` section in the `.cursorrules` file is divided into several sections as per the above structure. Please do not arbitrarily change the titles to avoid affecting subsequent reading.
* Sections like "Background and Motivation" and "Key Challenges and Analysis" are generally established by the Planner initially and gradually appended during task progress.
* "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" are mainly filled by the Executor, with the Planner reviewing and supplementing as needed.
* "Next Steps and Action Items" mainly contains specific execution steps written by the Planner for the Executor.

## Workflow Guidelines

* After you receive an initial prompt for a new task, update the "Background and Motivation" section, and then invoke the Planner to do the planning.
* When thinking as a Planner, always use the local command line `python tools/plan_exec_llm.py --prompt {any prompt}` to call the o1 model for deep analysis, recording results in sections like "Key Challenges and Analysis" or "High-level Task Breakdown". Also update the "Background and Motivation" section.
* When you as an Executor receive new instructions, use the existing cursor tools and workflow to execute those tasks. After completion, write back to the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections in the `Multi-Agent Scratchpad`.
* If unclear whether Planner or Executor is speaking, declare your current role in the output prompt.
* Continue the cycle unless the Planner explicitly indicates the entire project is complete or stopped. Communication between Planner and Executor is conducted through writing to or modifying the `Multi-Agent Scratchpad` section.

Please note:

* Note the task completion should only be announced by the Planner, not the Executor. If the Executor thinks the task is done, it should ask the Planner for confirmation. Then the Planner needs to do some cross-checking.
* Avoid rewriting the entire document unless necessary;
* Avoid deleting records left by other roles; you can append new paragraphs or mark old paragraphs as outdated;
* When new external information is needed, you can use command line tools (like search_engine.py, llm_api.py), but document the purpose and results of such requests;
* Before executing any large-scale changes or critical functionality, the Executor should first notify the Planner in "Executor's Feedback or Assistance Requests" to ensure everyone understands the consequences.
* During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use `gpt-4o` as the model name for OpenAI. It is the latest GPT model and has vision capabilities as well. `o1` is the most advanced and expensive model from OpenAI. Use it when you need to do reasoning, planning, or get blocked.
- Use `claude-3-5-sonnet-20241022` as the model name for Claude. It is the latest Claude model and has vision capabilities as well.

# Multi-Agent Scratchpad

## Background and Motivation

The user wants to create a graph database system that can process text or URL inputs and generate a visualization graph as output. The system should:
1. Analyze text to identify relevant entity types for graph nodes
2. Identify relevant relation types for graph edges
3. Initialize a graph database (e.g., Neo4j)
4. Parse the text to construct a graph based on the identified entities and relations
5. Visualize the graph in HTML format

A key requirement is that the node and edge schema should be dynamically generated based on the input text, rather than being hardcoded. While some common entity types (person, event, location, etc.) are expected, the system should be flexible enough to adapt to different types of text inputs.

The executor has access to three tools: invoking 3rd party LLM, invoking web browser, invoking search engine.

## Key Challenges and Analysis

Potential challenges include robust entity and relation extraction, managing dynamic schema generation without over-engineering, and ensuring performance with large or complex text. We must also address early testing on a variety of text samples to reduce risk. Resource constraints include availability of a Neo4j instance and ensuring the HTML visualization is straightforward to maintain.

## Verifiable Success Criteria

1. The system can automatically infer at least three distinct entity types and relation types from a sample text.
2. The generated Neo4j graph structure matches or exceeds 80% accuracy compared to a manually annotated benchmark.
3. The HTML visualization correctly displays nodes and edges with clear labels. 
4. Performance remains acceptable (under 2 seconds) for input text of up to ~1,000 tokens.

## High-level Task Breakdown

1. Data Ingestion & Preprocessing: Read text input, sanitize, and prepare for processing. 
2. Entity Extraction & Schema Suggestion: Identify candidate entity types from the text and propose node labels.
3. Relation Extraction & Schema Suggestion: Identify candidate relationship types, linking the detected entities.
4. Graph Database Initialization: Spin up a Neo4j instance or similar, define schemas programmatically. 
5. Graph Construction: Parse text to create the nodes and edges. 
6. Visualization: Generate an HTML interface displaying the created graph, ensuring interactivity and clarity.
7. Testing & Validation: Check correctness of extracted entities and relationships against sample data. 
8. Iteration & Tuning: Adjust extraction rules/entities/relations based on test feedback.

## Current Status / Progress Tracking

1. Project Setup (DONE):
   - Created project structure with core, nlp, and visualization modules
   - Set up development environment with required dependencies
   - Implemented basic test infrastructure

2. Schema Generation (DONE):
   - Implemented SchemaGenerator class using GPT-4o for entity and relation type extraction
   - Successfully extracting entity types and relation types from text
   - Initial tests show promising results with multiple entity and relation types identified

3. Neo4j Integration (DONE):
   - Implemented Neo4jManager class for database operations
   - Added methods for schema creation, entity and relation management
   - Implemented transaction handling and error management

4. Entity and Relation Extraction (DONE):
   - Implemented LLMEntityExtractor class using OpenAI's GPT-4o model
   - Added relation extraction with high accuracy
   - Implemented entity deduplication and merging

5. Graph Building (DONE):
   - Implemented GraphBuilder class to coordinate all components
   - Added methods to build complete graphs from text
   - Implemented error handling and logging

6. Visualization (DONE):
   - Implemented GraphVisualizer class using pyvis/networkx
   - Added customizable visualization options
   - Created interactive HTML output with node and edge styling

7. Application Integration (DONE):
   - Created main application module with CLI
   - Added support for text, file, and URL inputs
   - Implemented visualization-only mode for testing without Neo4j

8. Codebase Cleanup (DONE):
   - Removed spaCy/BERT dependencies and focused solely on LLM-based extraction
   - Updated all components to use the LLM-based entity extractor by default
   - Fixed import paths and method calls for consistency
   - Updated documentation to reflect the focus on LLM-based extraction

## Next Steps and Action Items

1. Testing and Validation:
   - Test with various text samples to ensure robustness
   - Optimize performance for larger texts
   - Benchmark extraction quality against manually annotated data

2. Documentation:
   - Add detailed API documentation
   - Create usage examples
   - Add installation instructions for Neo4j

3. Future Enhancements:
   - Add support for coreference resolution
   - Implement more advanced relation extraction
   - Add support for custom entity and relation types
   - Explore other LLM models for entity extraction

## Executor's Feedback or Assistance Requests

The implementation of the graph database system is complete, with a focus on the LLM-based entity extraction using GPT-4o. The system can now:
1. Extract entity and relation types from text using GPT-4o
2. Extract entity instances and their relationships with high accuracy
3. Store the graph in Neo4j
4. Visualize the graph in HTML

The codebase has been cleaned up to remove all traces of spaCy/BERT-based extraction, focusing solely on the LLM-based approach. Testing shows that the LLM-based approach provides significantly better entity and relation extraction, correctly identifying full entity names and extracting meaningful relationships with high confidence scores.

The system includes a visualization-only mode for testing without Neo4j, and the test script demonstrates the extraction and visualization capabilities using a sample text about Elon Musk and his companies.